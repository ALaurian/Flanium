using System.Diagnostics;
using System.Management;
using FlaUI.Core.AutomationElements;
using FlaUI.Core.WindowsAPI;
using FlaUI.UIA3;
using OpenQA.Selenium.Chrome;
using Polly;

namespace Flanium;

public class WinEvents
{
    public class Id
    {
        public static int GetDriverProcessId(ChromeDriverService driverService)
        {
            //Get all the childs generated by the driver like conhost, chrome.exe...
            var mos = new ManagementObjectSearcher(
                $"Select * From Win32_Process Where ParentProcessID={driverService.ProcessId}");
            foreach (var mo in mos.Get())
            {
                var processId = Convert.ToInt32(mo["ProcessID"]);
                return processId;
            }

            return 0;
        }

        public static Window GetWindow(int processId)
        {
            var automation = new UIA3Automation();
            var allProcesses = Process.GetProcesses();
            //loop through processes
            foreach (var item in allProcesses)
                if (item.Id == processId)
                    return automation.FromHandle(item.MainWindowHandle).AsWindow();

            return null;
        }

    }
    public class XPath
    {
        public static Window GetWindow(string xPath)
        {
            var automation = new UIA3Automation();
            var desktop = automation.GetDesktop();
            var window = desktop.FindFirstByXPath(xPath).AsWindow();
            return window;
        }

        public static List<Window> GetWindows(string xPath)
        {
            var automation = new UIA3Automation();
            var desktop = automation.GetDesktop();
            var window = desktop.FindAllByXPath(xPath);
            return window.Select(w => w.AsWindow()).ToList();
        }

        public static AutomationElement FindElement(Window window, string xPath, int retries = 15, double retryInterval = 1)
        {
            var retryGetText = Policy.HandleResult<AutomationElement>(result => result == null)
                .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
            var retryGetTextResult = retryGetText.Execute(() => window.FindFirstByXPath(xPath));

            return retryGetTextResult;
        }

        public static List<AutomationElement> FindElements(Window window, string xPath, int retries = 15, double retryInterval = 1)
        {

            var retryGetText = Policy.HandleResult<List<AutomationElement>>(result => result == null)
                .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
            var retryGetTextResult = retryGetText.Execute(() => window.FindAllByXPath(xPath).ToList());

            return retryGetTextResult;
        }

        public static AutomationElement FindElementInElement(AutomationElement element, string xPath, int retries = 15, double retryInterval = 1)
        {
            var retryGetText = Policy.HandleResult<AutomationElement>(result => result == null)
                .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
            var retryGetTextResult = retryGetText.Execute(() => element.FindFirstByXPath(xPath));

            return retryGetTextResult;
        }

        public static List<AutomationElement> FindElementsInElement(AutomationElement element, string xPath, int retries = 15, double retryInterval = 1)
        {
            
            var retryGetText = Policy.HandleResult<List<AutomationElement>>(result => result == null)
                .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
            var retryGetTextResult = retryGetText.Execute(() => element.FindAllByXPath(xPath).ToList());
            
            return retryGetTextResult;
        }
    }

    public class Action
    {
        
        public static string GetText(AutomationElement element, int retries = 15, double retryInterval = 1)
        {
            var retryGetText = Policy.HandleResult<string>(result => result == null)
                .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
            var retryGetTextResult = retryGetText.Execute(() =>
            {
                try
                {
                    return element.AsTextBox().Text;
                }
                catch (Exception e)
                {
                    return null;
                }
            });
            return retryGetTextResult;
        }
        public static bool SendText(AutomationElement element, string text, bool eventTrigger = false, int retries = 15,
            double retryInterval = 1)
        {
            if (element != null)
            {
                if (eventTrigger == false)
                {
                    var retryClick = Policy.HandleResult<bool>(result => result == true)
                        .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
                    var retryResult = retryClick.Execute(() =>
                    {
                        try
                        {
                            element.AsTextBox().Text = text;

                            while (element.AsTextBox().Text != text) Thread.Sleep(250);
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }

                        return false;
                    });

                    return retryResult;
                }
                else
                {
                    var retryClick = Policy.HandleResult<bool>(result => result == true)
                        .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
                    var retryResult = retryClick.Execute(() =>
                    {
                        try
                        {
                            element.AsTextBox().Enter(text);

                            while (element.AsTextBox().Text != text) Thread.Sleep(250);
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }

                        return false;
                    });

                    return retryResult;
                }
            }

            return false;
        }

        public static bool Click(AutomationElement element, bool invoke = false, int retries = 15,
            double retryInterval = 1)
        {
            if (element != null)
            {
                if (invoke == false)
                {
                    var retryClick = Policy.HandleResult<bool>(result => result == true)
                        .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
                    var retryResult = retryClick.Execute(() =>
                    {
                        try
                        {
                            element.Click();
                            Thread.Sleep(100);
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }

                        return false;
                    });

                    return retryResult;
                }
                else
                {
                    var retryClick = Policy.HandleResult<bool>(result => result == true)
                        .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
                    var retryResult = retryClick.Execute(() =>
                    {
                        try
                        {
                            element.AsButton().Invoke();
                            Thread.Sleep(100);
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }

                        return false;
                    });

                    return retryResult;
                }
            }

            return false;
        }

        public static bool DoubleClick(AutomationElement element, bool invoke = false, int retries = 15,
            double retryInterval = 1)
        {
            if (element != null)
            {
                if (invoke == false)
                {
                    var retryClick = Policy.HandleResult<bool>(result => result == true)
                        .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
                    var retryResult = retryClick.Execute(() =>
                    {
                        try
                        {
                            element.DoubleClick();
                            Thread.Sleep(100);
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }

                        return false;
                    });

                    return retryResult;
                }
                else
                {
                    var retryClick = Policy.HandleResult<bool>(result => result == true)
                        .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
                    var retryResult = retryClick.Execute(() =>
                    {
                        try
                        {
                            element.AsButton().Invoke();
                            Thread.Sleep(100);
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }

                        return false;
                    });

                    return retryResult;
                }
            }

            return false;
        }

        public static bool RightClick(AutomationElement element, bool invoke = false, int retries = 15,
            double retryInterval = 1)
        {
            if (element != null)
            {
                if (invoke == false)
                {
                    var retryClick = Policy.HandleResult<bool>(result => result == true)
                        .WaitAndRetry(retries, interval => TimeSpan.FromSeconds(retryInterval));
                    var retryResult = retryClick.Execute(() =>
                    {
                        try
                        {
                            element.RightClick();
                            Thread.Sleep(100);
                        }
                        catch (Exception e)
                        {
                            // ignored
                        }

                        return false;
                    });

                    return retryResult;
                }
            }

            return false;
        }

        public static void SendKeys(VirtualKeyShort keyShort)
        {
            FlaUI.Core.Input.Keyboard.Press(keyShort);
        }
    }
}