using System.Diagnostics;
using System.Management;
using FlaUI.Core.AutomationElements;
using FlaUI.UIA3;
using OpenQA.Selenium.Chrome;

namespace Flanium
{
    public class WinEvents
    {

        /// <summary>
        /// This method is used to retrieve the current process ID of the <c>Chrome</c> browser attached to the ChromeDriverService.
        /// </summary>
        /// <example>var chromePID = WinEvents.GetPid(driverService);</example>
        /// <param name="driverService"> Represents the ChromeDriverService instance.</param>
        public static int GetDriverProcessId(ChromeDriverService driverService)
        {
            //Get all the childs generated by the driver like conhost, chrome.exe...
            var mos = new ManagementObjectSearcher($"Select * From Win32_Process Where ParentProcessID={driverService.ProcessId}");
            foreach (var mo in mos.Get())
            {
                var processId = Convert.ToInt32(mo["ProcessID"]);
                return processId;
            }

            return 0;
        }
        
        /// <summary>
        /// This method is used to retrieve the window of the main window handle the process ID has.
        /// </summary>
        /// <example>var chromeWindow = WinEvents.GetWindow(chromePID);</example>
        /// <param name="processId"> Represents the process ID.</param>
        /// <returns></returns>
        public static Window GetWindowByProcessId(int processId)
        {
            var automation = new UIA3Automation();
            var allProcesses = Process.GetProcesses();
            //loop through processes
            foreach (var item in allProcesses)
            {
                if (item.Id == processId)
                {
                    return automation.FromHandle(item.MainWindowHandle).AsWindow();
                }

            }

            return null;

        }
        
        /// <summary>
        /// This method is used to retrieve the Window by using a Linq query. It is used to find the Window based on a specific property. 
        /// </summary>
        /// <param name="linq"> Represents the Linq query.</param>
        /// <example> var LinqWindow = WinEvents.GetWindowByLinq(x => x.Name.StartsWith("Explorer")); </example>
        public static Window GetWindowByLinq(Func<AutomationElement, bool> linq)
        {
            var automation = new UIA3Automation();
            var desktop = automation.GetDesktop();
            var window = desktop.FindAllChildren().Single(linq).AsWindow();
            return window;
        }
        
        /// <summary>
        /// This method is used to retrieve the Windows by using a Linq query. It is used to find the Windows based on a specific property.
        /// </summary>
        /// <param name="linq"> Represents the Linq query.</param>
        /// <example> var LinqWindow = WinEvents.GetWindowsByLinq(x => x.Name.StartsWith("Explorer")); </example>
        /// <returns>A List of AutomationElement.</returns>
        public static List<Window> GetWindowsByLinq(Func<AutomationElement, bool> linq)
        {
            var automation = new UIA3Automation();
            var desktop = automation.GetDesktop();
            var windows = desktop.FindAllChildren().Where(linq).Cast<Window>().ToList();
            return windows;
        }
        
        /// <summary>
        /// This method is used to retrieve the Element in a specific Window based on a Linq query. It is used to find the Element based on a specific property.
        /// </summary>
        /// <param name="window"> Represents the Window of the application in which to search this element.</param>
        /// <param name="linq"> Represents the Linq query.</param>
        /// <example> var LinqElement = WinEvents.FindElementByLinq(AppWindow, x => x.Name == "Address bar"); </example>
        public static AutomationElement FindElementByLinq(Window window, Func<AutomationElement, bool> linq)
        {
            var element = window.FindAllDescendants().Single(linq);

            return element;
        }
        /// <summary>
        /// This method is used to retrieve the Elements in a specific Window based on a Linq query. It is used to find the Elements based on a specific property.
        /// </summary>
        /// <param name="window"> Represents the Window of the application in which to search these elements.</param>
        /// <param name="linq"> Represents the Linq query.</param>
        /// <returns>A List of AutomationElement.</returns>
        /// <example> var LinqElements = WinEvents.FindElementsByLinq(AppWindow, x => x.Name == "Address bar"); </example>
        public static List<AutomationElement> FindElementsByLinq(Window window, Func<AutomationElement, bool> linq)
        {
            var elements = window.FindAllDescendants().Where(linq).ToList();

            return elements;
        }

        //Finds the element based on XPath inside a given Window

    }
}
