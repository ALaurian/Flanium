using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Management;
using System.Threading;
using FlaUI.Core.AutomationElements;
using FlaUI.UIA3;
using OpenQA.Selenium.Chrome;

namespace Flanium
{
    internal class WinEvents
    {

        /// <summary>
        /// This method is used to retrieve the current process ID of the <c>Chrome</c> browser attached to the ChromeDriverService.
        /// </summary>
        /// <example>var chromePID = WinEvents.GetPid(driverService);</example>
        /// <param name="driverService"> Represents the ChromeDriverService instance.</param>
        public static int GetPid(ChromeDriverService driverService)
        {
            //Get all the childs generated by the driver like conhost, chrome.exe...
            var mos = new ManagementObjectSearcher($"Select * From Win32_Process Where ParentProcessID={driverService.ProcessId}");
            foreach (var mo in mos.Get())
            {
                var pid = Convert.ToInt32(mo["ProcessID"]);
                return pid;
            }

            return 0;
        }
        
        /// <summary>
        /// This method is used to retrieve the window of the main window handle the process ID has.
        /// </summary>
        /// <example>var chromeWindow = WinEvents.GetWindow(chromePID);</example>
        /// <param name="pid"> Represents the process ID.</param>
        /// <returns></returns>
        public static AutomationElement GetWindow(int pid)
        {
            var automation = new UIA3Automation();
            var allProcesses = Process.GetProcesses();
            //loop through processes
            foreach (var item in allProcesses)
            {
                if (item.Id == pid)
                {
                    return automation.FromHandle(item.MainWindowHandle);
                }

            }

            return null;

        }
        
        /// <summary>
        /// This method is used to retrieve the Window based on XPath. In addition, there is an option to use an Anchor
        /// by XPath to maximize precision, and then you have the Text argument which will let you check whether the found Anchor has
        /// a specific text value and lastly ProcessID which you should use if you have specific isolation purposes (such as if you are using chromeDriver).
        /// </summary>
        /// <param name="xPath"> Represents the Window XPath.</param>
        /// <param name="anchorXPath"> Represents the Anchor XPath.</param>
        /// <param name="text"> Represents the Anchor's text.</param>
        /// <param name="processId"> Represents the process ID of the parent window to match.</param>
        /// <param name="timeoutRetries"> Represents the number of times this method will retry.</param>
        /// <param name="msWaitTime"> Represents the amount of time in milliseconds to wait before each retry.</param>
        /// <returns></returns>
        public static AutomationElement GetWindowByXPath(string xPath, string anchorXPath = "", string text = "", int processId = 0, int timeoutRetries = 10, int msWaitTime = 1000)
        {

            var automation = new UIA3Automation();
            var desktop = automation.GetDesktop();

            while (timeoutRetries != 0)
            {
                try
                {
                    var windows = desktop.FindAllByXPath(xPath);
                    if (windows.Length > 0)
                    {
                        if (anchorXPath != "")
                        {
                            foreach (var w in windows)
                            {
                                var anchor = w.FindFirstByXPath(anchorXPath);

                                if (anchor != null && text == "" && processId == 0)
                                {
                                    return w;
                                }

                                if (anchor != null && text != "" && processId == 0)
                                {
                                    if (anchor.AsTextBox().Text.Contains(text))
                                        return w;
                                }

                                if (anchor != null && processId != 0 && text == "")
                                {
                                    if (anchor.Properties.ProcessId == processId)
                                    {
                                        return w;
                                    }
                                }

                                if (anchor != null && processId != 0 && text != "")
                                {
                                    if (anchor.Properties.ProcessId == processId && anchor.AsTextBox().Text.Contains(text))
                                        return w;
                                }

                            }

                        }

                    }
                }
                catch
                {
                    // ignored
                }

                Thread.Sleep(msWaitTime);
                timeoutRetries--;
            }

            Console.WriteLine("Failed to find Window.");
            return null;
        }
        
        /// <summary>
        /// This method is used to retrieve the Element in a specific Window based on XPath.
        /// </summary>
        /// <param name="appWindow"> Represents the window of the application in which to search this element.</param>
        /// <param name="xPath"> Represents the element XPath.</param>
        /// <param name="timeOutRetry"> Represents the number of times this method will retry.</param>
        /// <param name="msWaitTime"> Represents the amount of time in milliseconds to wait before each retry.</param>
        /// <returns></returns>
        public static AutomationElement FindWinElementByXpath(AutomationElement appWindow, string xPath, int timeOutRetry = 10, int msWaitTime = 1000)
        {
            AutomationElement element;

            Console.WriteLine("     Searching for Windows Element: " + xPath + " in Window: " + appWindow?.Name);
            Console.WriteLine();

            while (timeOutRetry != 0)
            {
                try
                {
                    element = appWindow?.FindFirstByXPath(xPath);
                    if (element != null)
                    {
                        Console.WriteLine("Found Element: " + xPath + " (" + element.Name + ")");
                        Console.WriteLine();
                        return element;
                    }
                }
                catch
                {
                    // ignored
                }

                Thread.Sleep(msWaitTime);
                timeOutRetry--;
            }


            Console.WriteLine("Failed to find Windows Element: " + xPath + " in Window: " + appWindow?.Name);
            Console.WriteLine();
            return null;

        }

        /// <summary>
        /// This method is used to retrieve the Window by using a Linq query. It is used to find the Window based on a specific property. 
        /// </summary>
        /// <param name="linq"> Represents the Linq query.</param>
        /// <example> var LinqWindow = WinEvents.GetWindowByLinq(x => x.Name.StartsWith("Explorer")); </example>
        public static AutomationElement GetWindowByLinq(Func<AutomationElement, bool> linq)
        {
            var automation = new UIA3Automation();
            var desktop = automation.GetDesktop();
            var window = desktop.FindAllChildren().Single(linq);
            return window;
        }
        
        /// <summary>
        /// This method is used to retrieve the Windows by using a Linq query. It is used to find the Windows based on a specific property.
        /// </summary>
        /// <param name="linq"> Represents the Linq query.</param>
        /// <example> var LinqWindow = WinEvents.GetWindowsByLinq(x => x.Name.StartsWith("Explorer")); </example>
        /// <returns>A List of AutomationElement.</returns>
        public static List<AutomationElement> GetWindowsByLinq(Func<AutomationElement, bool> linq)
        {
            var automation = new UIA3Automation();
            var desktop = automation.GetDesktop();
            var windows = desktop.FindAllChildren().Where(linq).ToList();
            return windows;
        }
        
        /// <summary>
        /// This method is used to retrieve the Element in a specific Window based on a Linq query. It is used to find the Element based on a specific property.
        /// </summary>
        /// <param name="window"> Represents the Window of the application in which to search this element.</param>
        /// <param name="linq"> Represents the Linq query.</param>
        /// <example> var LinqElement = WinEvents.FindElementByLinq(AppWindow, x => x.Name == "Address bar"); </example>
        public static AutomationElement FindElementByLinq(AutomationElement window, Func<AutomationElement, bool> linq)
        {
            var element = window.FindAllDescendants().Single(linq);

            return element;
        }
        /// <summary>
        /// This method is used to retrieve the Elements in a specific Window based on a Linq query. It is used to find the Elements based on a specific property.
        /// </summary>
        /// <param name="window"> Represents the Window of the application in which to search these elements.</param>
        /// <param name="linq"> Represents the Linq query.</param>
        /// <returns>A List of AutomationElement.</returns>
        /// <example> var LinqElements = WinEvents.FindElementsByLinq(AppWindow, x => x.Name == "Address bar"); </example>
        public static List<AutomationElement> FindElementsByLinq(AutomationElement window, Func<AutomationElement, bool> linq)
        {
            var elements = window.FindAllDescendants().Where(linq).ToList();

            return elements;
        }

        //Finds the element based on XPath inside a given Window

    }
}
